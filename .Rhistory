setwd("~/Library/CloudStorage/OneDrive-Personal/PhD/2024/Stability/Automatic Threshold Selection")
# in the paper: Data-Adaptive Automatic Threshold Calibration       #
#  for Stability Selection (Huang et al. 2025)                      #
#                                                                   #
# Author: Martin Huang (martin.huang@sydney.edu.au)                 #
#         School of Mathematics & Statistics, University of Sydney  #
#         AUSTRALIA                                                 #
#                                                                   #
# Note: This will take around 24 hours to run. I have provided      #
# an Rdata file for my simulations.                                 #
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
source("Functions.R")
set.seed(1)
n = 20; p = 1000; active = 2; snr = 10
d = gendata(n = n, p = p, active = active)
fIs10e1 = fdr(X = d$X, beta = d$beta, p = p, snr = snr, EV = 1, LOOPS = 1)
fIs10e1
set.seed(1)
n = 20; p = 1000; active = 2; snr = 10
d = gendata(n = n, p = p, active = active)
X = d$X; beta = d$beta; p = p; snr = snr; EV = 1; LOOPS = 1000
false.selections = correct.selections.prop = method = pi = c()
i=1
signal = sqrt(mean((as.matrix(X) %*% as.matrix(beta))^2))
sigma = as.numeric(signal/sqrt(snr))
# Compute Y with SNR
Y = as.matrix(X)%*%as.matrix(beta) + rnorm(nrow(X), 0, sd = sigma)
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
# THIS WORKS
library(stabs)
# Example data
set.seed(123)
n = 20; p = 1000;
X <- matrix(rnorm(n*p), ncol = p) # Predictors
Y <- rnorm(n)                     # Response
# Stabsel with lars
stab_result_lars <- stabs::stabsel(x = X, y = Y,
fitfun = stabs::lars.lasso,  # Predefined fitfun in stabs
B = 100,
PFER = 5,
cutoff = 0.75,
sampling.type = "MB")
stab_result_lars
packageVersion("lars")
packageVersion("stabs")
stabs::lars.lasso
run_stabsel
signal = sqrt(mean((as.matrix(X) %*% as.matrix(beta))^2))
sigma = as.numeric(signal/sqrt(snr))
# Compute Y with SNR
Y = as.matrix(X)%*%as.matrix(beta) + rnorm(nrow(X), 0, sd = sigma)
# Stability Selection
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
s
library(lars)
lars(x,y)
lars(X,Y)
l = lars(X,Y)
stabs::lars.lasso(X,Y)
l = stabs::lars.lasso(X,Y)
l$selected
library(stabs)
library(lars)
l = stabs::lars.lasso(X,Y)
l
?lars.lasso
?lars
lars(X,Y)
l = lars(X,Y)
library(lars)
library(stabs)
signal = sqrt(mean((as.matrix(X) %*% as.matrix(beta))^2))
sigma = as.numeric(signal/sqrt(snr))
# Compute Y with SNR
Y = as.matrix(X)%*%as.matrix(beta) + rnorm(nrow(X), 0, sd = sigma)
# Stability Selection
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
library(stabs)
library(lars)
signal = sqrt(mean((as.matrix(X) %*% as.matrix(beta))^2))
sigma = as.numeric(signal/sqrt(snr))
# Compute Y with SNR
Y = as.matrix(X)%*%as.matrix(beta) + rnorm(nrow(X), 0, sd = sigma)
# Stability Selection
s = stabs::stabsel(x = X, y = Y, B = 100,
fitfun = stabs::lars.lasso, PFER = 5, cutoff = 0.75,
sampling.type = "MB")
s
?stabsel
